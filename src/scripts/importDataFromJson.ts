import 'dotenv/config';
import { readFileSync, readdirSync } from 'fs';
import { join } from 'path';
import { supabaseServer } from '../integrations/supabase/serverClient';

/**
 * Script g√©n√©rique d'import de donn√©es depuis des fichiers JSON
 * Usage: npm run import-data <table> <json-file-or-directory>
 *
 * Exemples:
 *   npm run import-data accommodations data/accommodations/la-colline-verte.json
 *   npm run import-data accommodations data/accommodations/
 */

async function importData(tableName: string, filePath: string) {
  try {
    console.log(`\nüîÑ Import de donn√©es vers la table "${tableName}"...`);
    console.log(`üìÅ Fichier: ${filePath}`);

    // Lire le fichier JSON
    const jsonData = readFileSync(filePath, 'utf-8');
    const data = JSON.parse(jsonData);

    console.log(`üìä Donn√©es √† ins√©rer:`, data.name || data.title || 'Sans nom');

    // Ins√©rer dans Supabase
    const { data: insertedData, error } = await supabaseServer
      .from(tableName)
      .insert(data)
      .select('*');

    if (error) {
      console.error('‚ùå Erreur lors de l\'insertion:', error.message);
      if (error.details) {
        console.error('D√©tails:', error.details);
      }
      if (error.hint) {
        console.error('Conseil:', error.hint);
      }
      return false;
    }

    console.log('‚úÖ Donn√©es ins√©r√©es avec succ√®s!');
    console.log('üìù ID:', insertedData?.[0]?.id);
    return true;

  } catch (error) {
    if (error instanceof Error) {
      console.error('‚ùå Erreur:', error.message);
    } else {
      console.error('‚ùå Erreur inconnue:', error);
    }
    return false;
  }
}

async function importDirectory(tableName: string, dirPath: string) {
  try {
    const files = readdirSync(dirPath).filter(f => f.endsWith('.json'));

    console.log(`\nüìÇ Trouv√© ${files.length} fichier(s) JSON dans ${dirPath}`);

    let successCount = 0;
    let errorCount = 0;

    for (const file of files) {
      const filePath = join(dirPath, file);
      const success = await importData(tableName, filePath);

      if (success) {
        successCount++;
      } else {
        errorCount++;
      }
    }

    console.log(`\nüìä R√©sum√©:`);
    console.log(`   ‚úÖ R√©ussis: ${successCount}`);
    console.log(`   ‚ùå √âchou√©s: ${errorCount}`);
    console.log(`   üìù Total: ${files.length}`);

  } catch (error) {
    if (error instanceof Error) {
      console.error('‚ùå Erreur lors de la lecture du r√©pertoire:', error.message);
    } else {
      console.error('‚ùå Erreur inconnue:', error);
    }
  }
}

// Main
const args = process.argv.slice(2);

if (args.length < 2) {
  console.error('‚ùå Usage: npm run import-data <table> <json-file-or-directory>');
  console.error('\nExemples:');
  console.error('  npm run import-data accommodations data/accommodations/la-colline-verte.json');
  console.error('  npm run import-data accommodations data/accommodations/');
  process.exit(1);
}

const [tableName, path] = args;

// V√©rifier si c'est un fichier ou un r√©pertoire
import { statSync } from 'fs';

try {
  const stats = statSync(path);

  if (stats.isDirectory()) {
    importDirectory(tableName, path);
  } else if (stats.isFile()) {
    importData(tableName, path);
  } else {
    console.error('‚ùå Le chemin sp√©cifi√© n\'est ni un fichier ni un r√©pertoire');
    process.exit(1);
  }
} catch (error) {
  if (error instanceof Error) {
    console.error('‚ùå Erreur:', error.message);
  }
  process.exit(1);
}
