#!/usr/bin/env node
/**
 * Script d'Import Direct PostgreSQL
 * ================================
 * Importe les donn√©es extraites vers la base PostgreSQL cible
 */

import { config } from 'dotenv';
import { Client } from 'pg';
import fs from 'fs';
import path from 'path';

// Load environment variables
config();

const TARGET_DB_URL = 'postgresql://postgres:f2IXGmb97vF8GiUT7EVFFfp0W85vAytI@37.59.121.40:5432/postgres';

const TABLES = [
  'partners', 'accommodations', 'restaurants', 'activities',
  'leisure_activities', 'profiles', 'subscriptions',
  'restaurant_reservations', 'travel_reservations'
];

async function importToPostgreSQL(extractionDir: string) {
  const client = new Client({
    connectionString: TARGET_DB_URL,
  });

  try {
    await client.connect();
    console.log('üîå Connexion √† la base PostgreSQL √©tablie');

    // Lire le r√©sum√© d'extraction
    const summaryPath = path.join(extractionDir, 'extraction_summary.json');
    if (!fs.existsSync(summaryPath)) {
      throw new Error(`R√©sum√© non trouv√©: ${summaryPath}`);
    }

    const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
    
    console.log(`üöÄ Import des donn√©es`);
    console.log(`üìÇ Source: ${extractionDir}`);
    console.log(`üéØ Cible: ${TARGET_DB_URL.replace(/:[^:@]*@/, ':***@')}`);
    console.log(`üìÖ Extraction: ${summary.timestamp}`);

    let importedTables = 0;
    let totalRecords = 0;

    for (const tableName of TABLES) {
      const recordCount = summary.tables[tableName];
      
      if (!recordCount || recordCount <= 0) {
        console.log(`‚è≠Ô∏è ${tableName}: ignor√© (${recordCount === 0 ? 'vide' : 'erreur'})`);
        continue;
      }

      const dataPath = path.join(extractionDir, `${tableName}.json`);
      if (!fs.existsSync(dataPath)) {
        console.error(`‚ùå ${tableName}: fichier manquant ${dataPath}`);
        continue;
      }

      try {
        console.log(`üîÑ Import: ${tableName} (${recordCount} enregistrements)`);
        
        const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
        
        if (!Array.isArray(data) || data.length === 0) {
          console.log(`‚è≠Ô∏è ${tableName}: aucune donn√©e valide`);
          continue;
        }

        // Commencer une transaction
        await client.query('BEGIN');
        
        try {
          // D√©sactiver temporairement les contraintes de cl√©s √©trang√®res
          await client.query('SET session_replication_role = replica');
          
          // Vider la table
          await client.query(`TRUNCATE TABLE ${tableName} CASCADE`);
          
          // Ins√©rer les donn√©es ligne par ligne pour g√©rer les erreurs
          let inserted = 0;
          for (const record of data) {
            try {
              const columns = Object.keys(record);
              const values = Object.values(record);
              const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
              
              const query = `
                INSERT INTO ${tableName} (${columns.join(', ')}) 
                VALUES (${placeholders})
                ON CONFLICT DO NOTHING
              `;
              
              await client.query(query, values);
              inserted++;
            } catch (recordError) {
              console.warn(`‚ö†Ô∏è Erreur enregistrement ${tableName}:`, recordError);
            }
          }
          
          // R√©activer les contraintes
          await client.query('SET session_replication_role = origin');
          
          // Valider la transaction
          await client.query('COMMIT');
          
          console.log(`‚úÖ ${tableName}: ${inserted}/${data.length} enregistrements import√©s`);
          importedTables++;
          totalRecords += inserted;
          
        } catch (error) {
          await client.query('ROLLBACK');
          throw error;
        }
        
      } catch (error) {
        console.error(`‚ùå ${tableName}:`, error);
      }
    }

    console.log(`\nüìä R√âSUM√â DE L'IMPORT`);
    console.log(`‚úÖ Tables import√©es: ${importedTables}`);
    console.log(`üìä Total enregistrements: ${totalRecords}`);
    
    // V√©rification finale
    console.log(`\nüîç V√©rification des donn√©es import√©es:`);
    for (const tableName of TABLES) {
      try {
        const result = await client.query(`SELECT COUNT(*) FROM ${tableName}`);
        const count = parseInt(result.rows[0].count);
        if (count > 0) {
          console.log(`  ‚úÖ ${tableName}: ${count} enregistrements`);
        }
      } catch (error) {
        console.log(`  ‚ùå ${tableName}: erreur de v√©rification`);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'import:', error);
    throw error;
  } finally {
    await client.end();
    console.log('üîå Connexion ferm√©e');
  }
}

// Usage
const extractionDir = process.argv[2] || findLatestExtraction();

function findLatestExtraction(): string {
  const backupDir = './migration-backups';
  if (!fs.existsSync(backupDir)) {
    throw new Error('Aucun r√©pertoire de sauvegarde trouv√©');
  }

  const extractionDirs = fs.readdirSync(backupDir)
    .filter(name => name.startsWith('extraction_'))
    .map(name => ({
      name,
      path: path.join(backupDir, name),
      mtime: fs.statSync(path.join(backupDir, name)).mtime
    }))
    .sort((a, b) => b.mtime.getTime() - a.mtime.getTime());

  if (extractionDirs.length === 0) {
    throw new Error('Aucune extraction trouv√©e');
  }

  const latest = extractionDirs[0];
  console.log(`üìÇ Extraction d√©tect√©e: ${latest.name}`);
  return latest.path;
}

if (!extractionDir) {
  console.error('‚ùå R√©pertoire d\'extraction requis');
  console.log('Usage: npx vite-node scripts/import-to-target-postgres.ts [r√©pertoire]');
  process.exit(1);
}

importToPostgreSQL(extractionDir).catch(error => {
  console.error('‚ùå √âchec de l\'import:', error);
  process.exit(1);
});