#!/bin/bash

# ================================================================
# Script de Rollback Supabase Migration
# ================================================================
# Ce script permet de revenir rapidement à la configuration Supabase cloud
# en cas de problème avec l'instance auto-hébergée

set -e  # Arrêt immédiat en cas d'erreur

# Configuration par défaut
BACKUP_DIR="${BACKUP_DIR:-./migration-backups}"
CONFIG_BACKUP_DIR="${BACKUP_DIR}/config-backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="${BACKUP_DIR}/rollback_${TIMESTAMP}.log"

# URLs Supabase
CLOUD_URL="${SUPABASE_CLOUD_URL:-https://psryoyugyimibjhwhvlh.supabase.co}"
CLOUD_KEY="${SUPABASE_CLOUD_KEY}"
SELFHOSTED_URL="${SUPABASE_SELFHOSTED_URL}"

# Fonction d'affichage avec timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction de vérification des prérequis
check_prerequisites() {
    log "🔍 Vérification des prérequis pour rollback..."
    
    # Vérification que les sauvegardes existent
    if [ ! -d "$CONFIG_BACKUP_DIR" ]; then
        log "❌ Répertoire de sauvegarde de configuration non trouvé: $CONFIG_BACKUP_DIR"
        exit 1
    fi
    
    # Vérification des variables requises
    if [ -z "$CLOUD_KEY" ]; then
        log "❌ SUPABASE_CLOUD_KEY est requis"
        exit 1
    fi
    
    # Création du répertoire de logs
    mkdir -p "$BACKUP_DIR"
    
    log "✅ Prérequis validés"
}

# Fonction de sauvegarde de la configuration actuelle (avant rollback)
backup_current_config() {
    log "💾 Sauvegarde de la configuration actuelle..."
    
    local rollback_backup_dir="${CONFIG_BACKUP_DIR}/pre-rollback-${TIMESTAMP}"
    mkdir -p "$rollback_backup_dir"
    
    # Sauvegarde du fichier client Supabase
    if [ -f "src/integrations/supabase/client.ts" ]; then
        cp "src/integrations/supabase/client.ts" "$rollback_backup_dir/client.ts.backup"
        log "Configuration Supabase client sauvegardée"
    fi
    
    # Sauvegarde des variables d'environnement actuelles
    cat > "$rollback_backup_dir/current_env.txt" << EOF
# Configuration avant rollback - $(date)
SUPABASE_URL_BEFORE_ROLLBACK=$SELFHOSTED_URL
BACKUP_TIMESTAMP=$TIMESTAMP
EOF
    
    log "✅ Configuration actuelle sauvegardée dans $rollback_backup_dir"
}

# Fonction de restauration de la configuration cloud
restore_cloud_config() {
    log "🔄 Restauration de la configuration Supabase cloud..."
    
    # Recherche de la sauvegarde la plus récente
    local latest_backup=$(ls -t "$CONFIG_BACKUP_DIR"/pre-migration-* 2>/dev/null | head -n1)
    
    if [ -n "$latest_backup" ] && [ -f "$latest_backup/client.ts.backup" ]; then
        log "Restauration depuis la sauvegarde: $latest_backup"
        cp "$latest_backup/client.ts.backup" "src/integrations/supabase/client.ts"
        log "✅ Configuration client Supabase restaurée"
    else
        log "⚠️ Aucune sauvegarde trouvée, restauration manuelle de la configuration cloud..."
        restore_cloud_config_manual
    fi
}

# Fonction de restauration manuelle
restore_cloud_config_manual() {
    log "🔧 Restauration manuelle de la configuration cloud..."
    
    # Mise à jour du fichier client.ts avec les paramètres cloud
    cat > "src/integrations/supabase/client.ts" << EOF

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types.ts';

export const SUPABASE_URL = "$CLOUD_URL";
export const SUPABASE_PUBLISHABLE_KEY = "$CLOUD_KEY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Initialize Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    debug: false, // Disable debug mode to reduce potential issues
  }
});

// Completely clear all auth data (for debugging) - not used in the app but can be used to clear the auth state if needed (e.g. if you want to test the auth flow)
export const cleanupAuthState = () => {
  try {
    // Clear all localStorage items related to Supabase auth
    Object.keys(localStorage).forEach(key => {
      if (key.includes('supabase') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    
    // Clear all sessionStorage items related to Supabase auth
    Object.keys(sessionStorage || {}).forEach(key => {
      if (key.includes('supabase') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
    
    // Clear any cookies related to auth (optional but thorough)
    document.cookie.split(';').forEach(cookie => {
      const [name] = cookie.split('=');
      if (name.trim().includes('sb-')) {
        document.cookie = \`\${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\`;
      }
    });
    
  } catch (error) {
    console.error('Error cleaning up auth state:', error);
  }
};
EOF
    
    log "✅ Configuration cloud restaurée manuellement"
}

# Fonction de test de connectivité cloud
test_cloud_connectivity() {
    log "🔗 Test de connectivité Supabase cloud..."
    
    # Test basique avec curl si disponible
    if command -v curl &> /dev/null; then
        local test_url="${CLOUD_URL}/rest/v1/"
        if curl -s -f -H "apikey: $CLOUD_KEY" "$test_url" &> /dev/null; then
            log "✅ Connectivité cloud validée"
            return 0
        else
            log "⚠️ Test de connectivité cloud échoué (mais configuration restaurée)"
            return 1
        fi
    else
        log "⚠️ curl non disponible - impossible de tester la connectivité"
        return 1
    fi
}

# Fonction de reconstruction de l'application
rebuild_application() {
    log "🔨 Reconstruction de l'application..."
    
    # Vérification que npm/yarn est disponible
    if command -v npm &> /dev/null; then
        log "Reconstruction avec npm..."
        npm run build 2>> "$LOG_FILE"
        if [ $? -eq 0 ]; then
            log "✅ Build réussi"
        else
            log "⚠️ Erreur de build - voir le log pour les détails"
        fi
    elif command -v yarn &> /dev/null; then
        log "Reconstruction avec yarn..."
        yarn build 2>> "$LOG_FILE"
        if [ $? -eq 0 ]; then
            log "✅ Build réussi"
        else
            log "⚠️ Erreur de build - voir le log pour les détails"
        fi
    else
        log "⚠️ npm/yarn non disponible - build manuel requis"
    fi
}

# Fonction de validation post-rollback
validate_rollback() {
    log "✅ Validation du rollback..."
    
    # Vérification que le fichier client contient l'URL cloud
    if grep -q "$CLOUD_URL" "src/integrations/supabase/client.ts"; then
        log "✅ Configuration cloud confirmée dans client.ts"
    else
        log "❌ Configuration cloud non trouvée dans client.ts"
        return 1
    fi
    
    # Test optionnel avec le script de validation si disponible
    if [ -f "scripts/validate-supabase-migration.ts" ]; then
        log "Test de validation avec l'instance cloud..."
        # Note: nécessiterait l'adaptation du script pour tester seulement la cible
    fi
    
    log "✅ Rollback validé"
}

# Fonction de génération du rapport de rollback
generate_rollback_report() {
    local report_file="${BACKUP_DIR}/rollback_report_${TIMESTAMP}.txt"
    
    cat > "$report_file" << EOF
=== RAPPORT DE ROLLBACK SUPABASE ===
Date: $(date)
Action: Rollback vers Supabase cloud
URL cloud: $CLOUD_URL
URL auto-hébergée (précédente): $SELFHOSTED_URL

Statut: SUCCÈS
Durée: $(($(date +%s) - start_time)) secondes

Fichiers modifiés:
- src/integrations/supabase/client.ts

Sauvegardes créées:
- Configuration pré-rollback: ${CONFIG_BACKUP_DIR}/pre-rollback-${TIMESTAMP}/

Log complet: $LOG_FILE

=== ÉTAPES POST-ROLLBACK ===
1. Vérifier le bon fonctionnement de l'application
2. Tester l'authentification
3. Valider les fonctionnalités critiques
4. Surveiller les logs d'erreur

=== INFORMATIONS TECHNIQUES ===
Instance auto-hébergée peut être conservée pour debuggage
Données synchronisées jusqu'au moment de la migration
Rollback rapide possible vers auto-hébergé si nécessaire
EOF
    
    log "📄 Rapport de rollback généré: $report_file"
}

# Fonction d'affichage de l'aide
show_help() {
    cat << EOF
Rollback Migration Supabase Auto-hébergé vers Cloud

Usage: $0 [OPTIONS]

Variables d'environnement requises:
  SUPABASE_CLOUD_URL          (défaut: https://psryoyugyimibjhwhvlh.supabase.co)
  SUPABASE_CLOUD_KEY          (requis - clé API cloud)
  SUPABASE_SELFHOSTED_URL     (optionnel - pour logging)

Options:
  BACKUP_DIR                  (défaut: ./migration-backups)

Prérequis:
- Sauvegarde de configuration existante dans BACKUP_DIR/config-backups/
- Clé API Supabase cloud valide

Exemple:
  export SUPABASE_CLOUD_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  $0

EOF
}

# Fonction principale
main() {
    local start_time=$(date +%s)
    
    log "🚨 DÉMARRAGE DU ROLLBACK SUPABASE"
    log "Retour vers Supabase cloud: $CLOUD_URL"
    
    check_prerequisites
    backup_current_config
    restore_cloud_config
    test_cloud_connectivity
    rebuild_application
    validate_rollback
    generate_rollback_report
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log "🎉 ROLLBACK TERMINÉ AVEC SUCCÈS!"
    log "⏱️ Durée totale: ${duration} secondes"
    log "📄 Log complet: $LOG_FILE"
    log ""
    log "⚠️ ÉTAPES RECOMMANDÉES POST-ROLLBACK:"
    log "  1. Tester l'application sur $CLOUD_URL"
    log "  2. Vérifier l'authentification utilisateur"
    log "  3. Valider les fonctionnalités critiques"
    log "  4. Surveiller les erreurs pendant 24h"
}

# Gestion des arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        if [ -z "$CLOUD_KEY" ]; then
            log "❌ SUPABASE_CLOUD_KEY est requis"
            show_help
            exit 1
        fi
        main
        ;;
esac