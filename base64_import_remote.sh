#!/bin/bash

# SCRIPT D'IMPORTATION VIA BASE64 - MÉTHODE DE SECOURS
# À exécuter sur le serveur distant 37.59.121.40

echo "🔧 IMPORTATION VIA BASE64 - MÉTHODE DE SECOURS"
echo "=============================================="
echo ""

DB_NAME="clubcreole_db"
DB_USER="postgres"

echo "Étape 1: Installation PostgreSQL si nécessaire"
if ! command -v psql &> /dev/null; then
    echo "Installation de PostgreSQL..."
    sudo apt update
    sudo DEBIAN_FRONTEND=noninteractive apt install -y postgresql postgresql-contrib
else
    echo "✅ PostgreSQL déjà installé"
fi

echo ""
echo "Étape 2: Démarrage service PostgreSQL"
sudo systemctl start postgresql
sudo systemctl enable postgresql

echo ""
echo "Étape 3: Création base de données"
if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; then
    echo "Suppression de l'ancienne base $DB_NAME..."
    sudo -u postgres dropdb $DB_NAME
fi

echo "Création de la base $DB_NAME..."
sudo -u postgres createdb -O $DB_USER $DB_NAME

echo ""
echo "Étape 4: Création du fichier dump via base64"
echo "Collez le contenu base64 ci-dessous (Ctrl+D pour terminer):"

# Création du fichier base64
mkdir -p /home/ubuntu/dumps
cd /home/ubuntu/dumps

cat > supabase_dump_20251028_164145.sql.b64 << 'BASE64_EOF'

BASE64_EOF

echo ""
echo "Étape 5: Décodage du fichier base64"
echo "Décodage en cours..."
base64 -d supabase_dump_20251028_164145.sql.b64 > supabase_dump_20251028_164145.sql

if [ $? -eq 0 ]; then
    echo "✅ Fichier SQL créé avec succès"
    echo "📏 Taille du fichier: $(du -h supabase_dump_20251028_164145.sql | cut -f1)"
    
    echo ""
    echo "Étape 6: Importation des données"
    echo "Importation en cours (peut prendre plusieurs minutes)..."
    
    sudo -u postgres psql -d $DB_NAME -f supabase_dump_20251028_164145.sql
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "✅ IMPORTATION RÉUSSIE !"
        echo ""
        echo "Étape 7: Vérification"
        echo "Tables créées:"
        sudo -u postgres psql -d $DB_NAME -c '\dt' | head -10
        
        echo ""
        echo "Nombre d'enregistrements par table:"
        sudo -u postgres psql -d $DB_NAME -c "
        SELECT 
            schemaname,
            tablename,
            n_tup_ins as enregistrements
        FROM pg_stat_user_tables 
        WHERE n_tup_ins > 0
        ORDER BY n_tup_ins DESC
        LIMIT 10;"
        
        echo ""
        echo "🎯 BASE DE DONNÉES PRÊTE !"
        echo "Informations de connexion:"
        echo "- Hôte: localhost"
        echo "- Base: $DB_NAME"
        echo "- Utilisateur: $DB_USER"
        echo "- Port: 5432"
        echo ""
        echo "Commande de connexion:"
        echo "sudo -u postgres psql -d $DB_NAME"
        
    else
        echo "❌ Erreur lors de l'importation"
        echo "Vérifiez le contenu du fichier:"
        head -20 supabase_dump_20251028_164145.sql
    fi
else
    echo "❌ Erreur lors du décodage base64"
fi